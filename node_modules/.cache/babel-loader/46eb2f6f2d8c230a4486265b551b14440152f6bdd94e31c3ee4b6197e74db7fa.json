{"ast":null,"code":"import { swap, insertStep } from './helpers';\nconst quickSort = (array, position, arraySteps, colorSteps) => {\n  if (array.length < 2) {\n    insertStep(array, position, arraySteps);\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\n    colorKey[position] = 2;\n    colorSteps.push(colorKey);\n    return;\n  }\n\n  // pick median of three numbers as pivot and sent it to back\n  swap(array, pickPivot(array), array.length - 1);\n  insertStep(array, position, arraySteps);\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\n  let pivot = array[array.length - 1];\n  let A = 0;\n  let B = array.length - 1;\n\n  // swap small value from right with big value from left\n  while (A < B) {\n    while (array[A] < pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      A++;\n    }\n    while (array[B] >= pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      B--;\n    }\n    if (A < B) {\n      swap(array, A, B);\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n    }\n  }\n\n  // swap big value with pivot\n  let bigIndex = Math.max(A, B);\n  swap(array, bigIndex, array.length - 1);\n  insertStep(array, position, arraySteps);\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  colorKey[position + bigIndex] = 2;\n  colorSteps.push(colorKey);\n\n  // recurse on two halves\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\n  return;\n};\nfunction pickPivot(array) {\n  let A = array[0];\n  let B = array[Math.floor(array.length / 2)];\n  let C = array[array.length - 1];\n  let middleValue = [A, B, C].sort()[1];\n  let middleIndex = array.indexOf(middleValue);\n  return middleIndex;\n}\nexport default quickSort;","map":{"version":3,"names":["swap","insertStep","quickSort","array","position","arraySteps","colorSteps","length","colorKey","slice","push","pickPivot","pivot","A","B","map","key","bigIndex","Math","max","floor","C","middleValue","sort","middleIndex","indexOf"],"sources":["/home/prabhakar/projects/Sorting-Visualizer-Complete/src/algorithms/QuickSort.js"],"sourcesContent":["import { swap, insertStep } from './helpers';\n\nconst quickSort = (array, position, arraySteps, colorSteps) => {\n  if (array.length < 2) {\n    insertStep(array, position, arraySteps);\n\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\n    colorKey[position] = 2;\n    colorSteps.push(colorKey);\n    return;\n  }\n\n  // pick median of three numbers as pivot and sent it to back\n  swap(array, pickPivot(array), array.length - 1);\n  insertStep(array, position, arraySteps);\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\n\n  let pivot = array[array.length - 1];\n  let A = 0;\n  let B = array.length - 1;\n\n  // swap small value from right with big value from left\n  while (A < B) {\n    while (array[A] < pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      A++;\n    }\n    while (array[B] >= pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      B--;\n    }\n    if (A < B) {\n      swap(array, A, B);\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n    }\n  }\n\n  // swap big value with pivot\n  let bigIndex = Math.max(A, B);\n\n  swap(array, bigIndex, array.length - 1);\n  insertStep(array, position, arraySteps);\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  colorKey[position + bigIndex] = 2;\n  colorSteps.push(colorKey);\n\n  // recurse on two halves\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\n\n  return;\n}\n\nfunction pickPivot(array) {\n  let A = array[0];\n  let B = array[Math.floor(array.length / 2)];\n  let C = array[array.length - 1];\n\n  let middleValue = [A, B, C].sort()[1];\n  let middleIndex = array.indexOf(middleValue);\n\n  return middleIndex;\n}\n\nexport default quickSort;"],"mappings":"AAAA,SAASA,IAAI,EAAEC,UAAU,QAAQ,WAAW;AAE5C,MAAMC,SAAS,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,KAAK;EAC7D,IAAIH,KAAK,CAACI,MAAM,GAAG,CAAC,EAAE;IACpBN,UAAU,CAACE,KAAK,EAAEC,QAAQ,EAAEC,UAAU,CAAC;IAEvC,IAAIG,QAAQ,GAAGF,UAAU,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC;IACxDD,QAAQ,CAACJ,QAAQ,CAAC,GAAG,CAAC;IACtBE,UAAU,CAACI,IAAI,CAACF,QAAQ,CAAC;IACzB;EACF;;EAEA;EACAR,IAAI,CAACG,KAAK,EAAEQ,SAAS,CAACR,KAAK,CAAC,EAAEA,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC;EAC/CN,UAAU,CAACE,KAAK,EAAEC,QAAQ,EAAEC,UAAU,CAAC;EACvCC,UAAU,CAACI,IAAI,CAACJ,UAAU,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC;EAE1D,IAAIG,KAAK,GAAGT,KAAK,CAACA,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC;EACnC,IAAIM,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAGX,KAAK,CAACI,MAAM,GAAG,CAAC;;EAExB;EACA,OAAOM,CAAC,GAAGC,CAAC,EAAE;IACZ,OAAOX,KAAK,CAACU,CAAC,CAAC,GAAGD,KAAK,EAAE;MACvBX,UAAU,CAACE,KAAK,EAAEC,QAAQ,EAAEC,UAAU,CAAC;MACvC,IAAIG,QAAQ,GAAGF,UAAU,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC;MACxDD,QAAQ,GAAGA,QAAQ,CAACO,GAAG,CAACC,GAAG,IAAIA,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACjDR,QAAQ,CAACJ,QAAQ,GAAGS,CAAC,CAAC,GAAG,CAAC;MAC1BL,QAAQ,CAACJ,QAAQ,GAAGU,CAAC,CAAC,GAAG,CAAC;MAC1BR,UAAU,CAACI,IAAI,CAACF,QAAQ,CAAC;MACzBK,CAAC,EAAE;IACL;IACA,OAAOV,KAAK,CAACW,CAAC,CAAC,IAAIF,KAAK,EAAE;MACxBX,UAAU,CAACE,KAAK,EAAEC,QAAQ,EAAEC,UAAU,CAAC;MACvC,IAAIG,QAAQ,GAAGF,UAAU,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC;MACxDD,QAAQ,GAAGA,QAAQ,CAACO,GAAG,CAACC,GAAG,IAAIA,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACjDR,QAAQ,CAACJ,QAAQ,GAAGS,CAAC,CAAC,GAAG,CAAC;MAC1BL,QAAQ,CAACJ,QAAQ,GAAGU,CAAC,CAAC,GAAG,CAAC;MAC1BR,UAAU,CAACI,IAAI,CAACF,QAAQ,CAAC;MACzBM,CAAC,EAAE;IACL;IACA,IAAID,CAAC,GAAGC,CAAC,EAAE;MACTd,IAAI,CAACG,KAAK,EAAEU,CAAC,EAAEC,CAAC,CAAC;MACjBb,UAAU,CAACE,KAAK,EAAEC,QAAQ,EAAEC,UAAU,CAAC;MACvC,IAAIG,QAAQ,GAAGF,UAAU,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC;MACxDD,QAAQ,GAAGA,QAAQ,CAACO,GAAG,CAACC,GAAG,IAAIA,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACjDR,QAAQ,CAACJ,QAAQ,GAAGS,CAAC,CAAC,GAAG,CAAC;MAC1BL,QAAQ,CAACJ,QAAQ,GAAGU,CAAC,CAAC,GAAG,CAAC;MAC1BR,UAAU,CAACI,IAAI,CAACF,QAAQ,CAAC;IAC3B;EACF;;EAEA;EACA,IAAIS,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACN,CAAC,EAAEC,CAAC,CAAC;EAE7Bd,IAAI,CAACG,KAAK,EAAEc,QAAQ,EAAEd,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC;EACvCN,UAAU,CAACE,KAAK,EAAEC,QAAQ,EAAEC,UAAU,CAAC;EACvC,IAAIG,QAAQ,GAAGF,UAAU,CAACA,UAAU,CAACC,MAAM,GAAG,CAAC,CAAC,CAACE,KAAK,CAAC,CAAC;EACxDD,QAAQ,CAACJ,QAAQ,GAAGa,QAAQ,CAAC,GAAG,CAAC;EACjCX,UAAU,CAACI,IAAI,CAACF,QAAQ,CAAC;;EAEzB;EACAN,SAAS,CAACC,KAAK,CAACM,KAAK,CAAC,CAAC,EAAEI,CAAC,CAAC,EAAET,QAAQ,EAAEC,UAAU,EAAEC,UAAU,CAAC;EAC9DJ,SAAS,CAACC,KAAK,CAACM,KAAK,CAACI,CAAC,GAAG,CAAC,CAAC,EAAET,QAAQ,GAAGS,CAAC,GAAG,CAAC,EAAER,UAAU,EAAEC,UAAU,CAAC;EAEvE;AACF,CAAC;AAED,SAASK,SAASA,CAACR,KAAK,EAAE;EACxB,IAAIU,CAAC,GAAGV,KAAK,CAAC,CAAC,CAAC;EAChB,IAAIW,CAAC,GAAGX,KAAK,CAACe,IAAI,CAACE,KAAK,CAACjB,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC;EAC3C,IAAIc,CAAC,GAAGlB,KAAK,CAACA,KAAK,CAACI,MAAM,GAAG,CAAC,CAAC;EAE/B,IAAIe,WAAW,GAAG,CAACT,CAAC,EAAEC,CAAC,EAAEO,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACrC,IAAIC,WAAW,GAAGrB,KAAK,CAACsB,OAAO,CAACH,WAAW,CAAC;EAE5C,OAAOE,WAAW;AACpB;AAEA,eAAetB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}