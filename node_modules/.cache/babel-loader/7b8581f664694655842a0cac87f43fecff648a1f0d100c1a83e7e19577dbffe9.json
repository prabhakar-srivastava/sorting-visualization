{"ast":null,"code":"import{insertStep}from'./helpers';var mergeSort=function mergeSort(array,position,arraySteps,colorSteps){if(array.length===1)return array;var mid=Math.floor(array.length/2);var L=mergeSort(array.slice(0,mid),position,arraySteps,colorSteps);var R=mergeSort(array.slice(mid),position+mid,arraySteps,colorSteps);var arrayNew=merge(L,R,position,arraySteps,colorSteps);arraySteps.push(arraySteps[arraySteps.length-1].slice());colorSteps.push(colorSteps[colorSteps.length-1].slice().fill(arrayNew.length===arraySteps[0].length?2:0));return arrayNew;};var merge=function merge(L,R,position,arraySteps,colorSteps){var arrayNew=[];var A=0;var B=0;while(L.length>0&&R.length>0){if(L[A]<R[B]){arrayNew.push(L.shift());insertStep(arrayNew,position,arraySteps);}else{arrayNew.push(R.shift());insertStep(arrayNew,position,arraySteps);}updateColor(position,colorSteps,arrayNew.length-1,[],[]);}if(L.length!==0||R.length!==0){updateColor(position,colorSteps,arrayNew.length,L,R);arrayNew=arrayNew.concat(L);arrayNew=arrayNew.concat(R);insertStep(arrayNew,position,arraySteps);}return arrayNew;};var updateColor=function updateColor(position,colorSteps,start,L,R){var colorKey=colorSteps[colorSteps.length-1].slice();var end=position+start+L.length+R.length;start=start+position;if(end===start){colorKey.fill(1,start,end+1);}else{colorKey.fill(0,start,end);}colorSteps.push(colorKey);};export default mergeSort;","map":{"version":3,"names":["insertStep","mergeSort","array","position","arraySteps","colorSteps","length","mid","Math","floor","L","slice","R","arrayNew","merge","push","fill","A","B","shift","updateColor","concat","start","colorKey","end"],"sources":["/home/prabhakar/projects/Sorting-Visualizer-Complete/src/algorithms/MergeSort.js"],"sourcesContent":["import { insertStep } from './helpers';\n\nconst mergeSort = (array, position, arraySteps, colorSteps) => {\n\tif (array.length === 1) return array;\n\tlet mid = Math.floor(array.length / 2);\n\n\tlet L = mergeSort(array.slice(0, mid), position, arraySteps, colorSteps);\n\tlet R = mergeSort(array.slice(mid), position + mid, arraySteps, colorSteps);\n\n\tlet arrayNew = merge(L, R, position, arraySteps, colorSteps);\n\tarraySteps.push(arraySteps[arraySteps.length - 1].slice());\n\tcolorSteps.push(\n\t\tcolorSteps[colorSteps.length - 1]\n\t\t\t.slice()\n\t\t\t.fill(arrayNew.length === arraySteps[0].length ? 2 : 0)\n\t);\n\treturn arrayNew;\n};\n\nconst merge = (L, R, position, arraySteps, colorSteps) => {\n\tlet arrayNew = [];\n\tlet A = 0;\n\tlet B = 0;\n\n\twhile (L.length > 0 && R.length > 0) {\n\t\tif (L[A] < R[B]) {\n\t\t\tarrayNew.push(L.shift());\n\t\t\tinsertStep(arrayNew, position, arraySteps);\n\t\t} else {\n\t\t\tarrayNew.push(R.shift());\n\t\t\tinsertStep(arrayNew, position, arraySteps);\n\t\t}\n\t\tupdateColor(position, colorSteps, arrayNew.length - 1, [], []);\n\t}\n\n\n\tif (L.length !== 0 || R.length !== 0) {\n\t\tupdateColor(position, colorSteps, arrayNew.length, L, R);\n\t\tarrayNew = arrayNew.concat(L);\n\t\tarrayNew = arrayNew.concat(R);\n\t\tinsertStep(arrayNew, position, arraySteps);\n\t}\n\n\treturn arrayNew;\n};\n\nconst updateColor = (position, colorSteps, start, L, R) => {\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\n\tlet end = position + start + L.length + R.length;\n\tstart = start + position;\n\n\tif (end === start) {\n\t\tcolorKey.fill(1, start, end + 1);\n\t} else {\n\t\tcolorKey.fill(0, start, end);\n\t}\n\tcolorSteps.push(colorKey);\n};\n\nexport default mergeSort;\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,WAAW,CAEtC,GAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,KAAK,CAAEC,QAAQ,CAAEC,UAAU,CAAEC,UAAU,CAAK,CAC9D,GAAIH,KAAK,CAACI,MAAM,GAAK,CAAC,CAAE,MAAO,CAAAJ,KAAK,CACpC,GAAI,CAAAK,GAAG,CAAGC,IAAI,CAACC,KAAK,CAACP,KAAK,CAACI,MAAM,CAAG,CAAC,CAAC,CAEtC,GAAI,CAAAI,CAAC,CAAGT,SAAS,CAACC,KAAK,CAACS,KAAK,CAAC,CAAC,CAAEJ,GAAG,CAAC,CAAEJ,QAAQ,CAAEC,UAAU,CAAEC,UAAU,CAAC,CACxE,GAAI,CAAAO,CAAC,CAAGX,SAAS,CAACC,KAAK,CAACS,KAAK,CAACJ,GAAG,CAAC,CAAEJ,QAAQ,CAAGI,GAAG,CAAEH,UAAU,CAAEC,UAAU,CAAC,CAE3E,GAAI,CAAAQ,QAAQ,CAAGC,KAAK,CAACJ,CAAC,CAAEE,CAAC,CAAET,QAAQ,CAAEC,UAAU,CAAEC,UAAU,CAAC,CAC5DD,UAAU,CAACW,IAAI,CAACX,UAAU,CAACA,UAAU,CAACE,MAAM,CAAG,CAAC,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,CAC1DN,UAAU,CAACU,IAAI,CACdV,UAAU,CAACA,UAAU,CAACC,MAAM,CAAG,CAAC,CAAC,CAC/BK,KAAK,CAAC,CAAC,CACPK,IAAI,CAACH,QAAQ,CAACP,MAAM,GAAKF,UAAU,CAAC,CAAC,CAAC,CAACE,MAAM,CAAG,CAAC,CAAG,CAAC,CACxD,CAAC,CACD,MAAO,CAAAO,QAAQ,CAChB,CAAC,CAED,GAAM,CAAAC,KAAK,CAAG,QAAR,CAAAA,KAAKA,CAAIJ,CAAC,CAAEE,CAAC,CAAET,QAAQ,CAAEC,UAAU,CAAEC,UAAU,CAAK,CACzD,GAAI,CAAAQ,QAAQ,CAAG,EAAE,CACjB,GAAI,CAAAI,CAAC,CAAG,CAAC,CACT,GAAI,CAAAC,CAAC,CAAG,CAAC,CAET,MAAOR,CAAC,CAACJ,MAAM,CAAG,CAAC,EAAIM,CAAC,CAACN,MAAM,CAAG,CAAC,CAAE,CACpC,GAAII,CAAC,CAACO,CAAC,CAAC,CAAGL,CAAC,CAACM,CAAC,CAAC,CAAE,CAChBL,QAAQ,CAACE,IAAI,CAACL,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,CACxBnB,UAAU,CAACa,QAAQ,CAAEV,QAAQ,CAAEC,UAAU,CAAC,CAC3C,CAAC,IAAM,CACNS,QAAQ,CAACE,IAAI,CAACH,CAAC,CAACO,KAAK,CAAC,CAAC,CAAC,CACxBnB,UAAU,CAACa,QAAQ,CAAEV,QAAQ,CAAEC,UAAU,CAAC,CAC3C,CACAgB,WAAW,CAACjB,QAAQ,CAAEE,UAAU,CAAEQ,QAAQ,CAACP,MAAM,CAAG,CAAC,CAAE,EAAE,CAAE,EAAE,CAAC,CAC/D,CAGA,GAAII,CAAC,CAACJ,MAAM,GAAK,CAAC,EAAIM,CAAC,CAACN,MAAM,GAAK,CAAC,CAAE,CACrCc,WAAW,CAACjB,QAAQ,CAAEE,UAAU,CAAEQ,QAAQ,CAACP,MAAM,CAAEI,CAAC,CAAEE,CAAC,CAAC,CACxDC,QAAQ,CAAGA,QAAQ,CAACQ,MAAM,CAACX,CAAC,CAAC,CAC7BG,QAAQ,CAAGA,QAAQ,CAACQ,MAAM,CAACT,CAAC,CAAC,CAC7BZ,UAAU,CAACa,QAAQ,CAAEV,QAAQ,CAAEC,UAAU,CAAC,CAC3C,CAEA,MAAO,CAAAS,QAAQ,CAChB,CAAC,CAED,GAAM,CAAAO,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIjB,QAAQ,CAAEE,UAAU,CAAEiB,KAAK,CAAEZ,CAAC,CAAEE,CAAC,CAAK,CAC1D,GAAI,CAAAW,QAAQ,CAAGlB,UAAU,CAACA,UAAU,CAACC,MAAM,CAAG,CAAC,CAAC,CAACK,KAAK,CAAC,CAAC,CACxD,GAAI,CAAAa,GAAG,CAAGrB,QAAQ,CAAGmB,KAAK,CAAGZ,CAAC,CAACJ,MAAM,CAAGM,CAAC,CAACN,MAAM,CAChDgB,KAAK,CAAGA,KAAK,CAAGnB,QAAQ,CAExB,GAAIqB,GAAG,GAAKF,KAAK,CAAE,CAClBC,QAAQ,CAACP,IAAI,CAAC,CAAC,CAAEM,KAAK,CAAEE,GAAG,CAAG,CAAC,CAAC,CACjC,CAAC,IAAM,CACND,QAAQ,CAACP,IAAI,CAAC,CAAC,CAAEM,KAAK,CAAEE,GAAG,CAAC,CAC7B,CACAnB,UAAU,CAACU,IAAI,CAACQ,QAAQ,CAAC,CAC1B,CAAC,CAED,cAAe,CAAAtB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}